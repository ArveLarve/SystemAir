#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('init:server');
var http = require('http');

var ModbusRTU = require("modbus-serial");
var modClient = new ModbusRTU();

var modbusValues = new Array();

// open connection to a tcp line for Modbus RTU
modClient.connectTelnet("192.168.1.121",{port: 1234},function(){
  modClient.setID(1);
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var Stopwatch = require('../models/stopwatch');
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var stopwatch = new Stopwatch();
stopwatch.on('tick:stopwatch',function(time){
  io.sockets.emit('time',{ time: time });
});

stopwatch.on('start:stopwatch',function(){
  modClient.writeCoil(11202,true)
      .then(function(){
        modClient.readCoils(11202, 1).then(function(latestval){
          io.emit('unBalanced', latestval.data[0]);
          //console.log('Latest unBalanced: ' + latestval.data[0]);
        }).then(function(){
          modClient.readHoldingRegisters(100, 1)
            .then(function(data) {
                //console.log('REG_FAN_SPEED_LEVEL: ' + data.data);
                io.emit('speedMode', data.data);
              })
        });
      });
});

stopwatch.on('stop:stopwatch',function(){
  modClient.writeCoil(11202,false)
      .then(function(){
        modClient.readCoils(11202, 1).then(function(latestval){
            io.emit('unBalanced', latestval.data[0]);
            //console.log('Latest unBalanced: ' + latestval.data[0]);
        }).then(function(){
          modClient.readHoldingRegisters(100, 1)
            .then(function(data) {
                //console.log('REG_FAN_SPEED_LEVEL: ' + data.data);
                io.emit('speedMode', data.data);
              })
        });
      })

});


io.on('connection', function(socket){
  console.log('a user connected');
  modClient.readHoldingRegisters(100, 1).then(function(data) {
        //console.log('REG_FAN_SPEED_LEVEL: ' + data.data);
        io.emit('speedMode', data.data);
      }).then(function(){
        modClient.readCoils(11202, 1).then(function(data) {
          //console.log('REG_DI_03: ' + data.data[0]);
          io.emit('unBalanced', data.data[0]);
        })
      }).catch(console.log);    

  socket.on('speedMode', function(value){
    //console.log('SpeedMode: ' + value);
    modClient.writeRegisters(100,value)
      .then(function(){
        modClient.readHoldingRegisters(100, 1)
          .then(function(latestval){
            io.emit('speedMode', latestval.data);
            //console.log('Latest SpeedMode: ' + latestval.data);
          });
      })
      .catch(console.log);
  });
  socket.on('unBalanced', function(){
    console.log("click!");
    if(stopwatch.isRunning()){
      stopwatch.stop();
    }else{
      stopwatch.start();
    }
  });

  socket.on('fire-place-timer', function(value){
    stopwatch.reset(value);
  });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

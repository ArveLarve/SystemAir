#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('init:server');
var http = require('http');

var modClient = require("./modbus");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var Stopwatch = require('../modules/stopwatch');
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var stopwatch = new Stopwatch();
stopwatch.on('tick:stopwatch',function(time){
  io.sockets.emit('time',{ time: time });
});



stopwatch.on('start:stopwatch', function(){
  
  modClient.setFireplaceMode(true).then(function(ret){
    io.emit('unBalanced', ret);
  }).then(function(){      
    modClient.getFanLevel().then(function(ret){
      if(ret){
        io.emit('speedMode', ret);
      }
    });
  });
});

stopwatch.on('stop:stopwatch',function(){
  modClient.setFireplaceMode(false).then(function(ret){
    io.emit('unBalanced', ret);
  }).then(function(){
    // get latest fanLevel 
    modClient.getFanLevel().then(function(ret){
      if(ret){
        io.emit('speedMode', ret);
      }
    });
  });
});


io.on('connection', function(socket){
  console.log('a user connected');
  modClient.getFanLevel().then(function(ret){
    if(ret){
      io.emit('speedMode', ret);
    }
  }).then(function(){
    modClient.getFireplaceMode().then(function(ret){
      if(ret){
        io.emit('unBalanced', ret);
      }
    }).then(function(){
      modClient.getTemperature().then(function(ret){
        if(ret){
          io.emit('tempSetpoint', ret);
        }
      })
    })
  }).catch(console.log);    

  socket.on('speedMode', function(value){
      modClient.setFanLevel(value).then(function(ret){
        if(ret){
          io.emit('speedMode', ret);
        }
      });
  });

  socket.on('tempSetpoint', function(value){
      modClient.setTemperature(value).then(function(ret){
          console.log("set setpoint " + value);
        if(ret){
          io.emit('tempSetpoint', ret);
        }
      });
  });

  socket.on('unBalanced', function(){
    if(stopwatch.isRunning()){
      stopwatch.stop();
    }else{
      stopwatch.start();
    }
  });

  socket.on('fire-place-timer', function(value){
    stopwatch.reset(value);
  });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
